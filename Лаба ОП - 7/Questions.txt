1. Что такое рекурсивная подпрограмма?
    Подпрограмма называется рекурсивной, если она содержит обращение к самой себе. С подпрограммой связано множество
    локальных объектов, новые экземпляры которых создаются каждый раз, когда подпрограмма вызывается.
2. Что такое итерация?
    Это организация обработки данных, при которой действия повторяются многократно, не приводя при этом к вызовам самих
    себя. В узком смысле — один шаг итерационного, циклического процесса.
3. Что такое стек? Каким образом стек используется при реализации рекурсии?
    Стек — абстрактный тип данных, представляющий собой список элементов, организованных по принципу LIFO (Last In,
    First Out - Последним вошел, первым вышел). Порядок вычисления рекурсивной функции имеет вид аппаратного стека:
    рекурсия все идет и идет в глубину, пока не найдет точное значение, а потом идет обратно, вычисляя новые значения на
    основе уже вычисленных.
4. Составьте рекурсивный и итерационный алгоритмы нахождения N!.
    def fact_1(n):
        if n == 0:
            return 1
        else:
            return n * fact_1(n - 1)

    def fact_2(n):
        res = 1
        for i in range(1, n + 1):
            res *= i
        return res
5. Объясните термин "косвенная рекурсия"?
    Косвенная рекурсия означает, что одна процедура вызывает другую процедуру, а та, в свою очередь, прямо или
    косвенно, приводит к вызову первоначальной процедуры.
6. Если эффективность алгоритмов оценивать по количеству операторов присваивания, то, как вы думаете, какой алгоритм
   (рекурсивный или итерационный) будет наиболее эффективен? Обоснуйте на примере вычисления значений многочлена Лагранжа:
        Простая рекурсия: 1.9836493729799656e+16, за 1.062347650527954 секунд
        Кэшированная рекурсия: 1.9836493729799656e+16, за 6.651878356933594e-05 секунд
        Итерационная функция: 1.9836493729799656e+16, за 4.649162292480469e-05 секунд
    Ответ: Итерационный алгоритм эффективнее по времени, чем рекурсивный; Рекурсия с кэшированием выполняется дольше
           по времени чем итерационный алгоритм, в среднем, в 1,5 раза.
